#include <unordered_map>
#include <map>
#include <set>

class NumberContainers {
private:
    std::unordered_map<int, int> indexToNumber; // Maps index -> number
    std::map<int, std::set<int>> numberToIndices; // Maps number -> sorted set of indices

public:
    NumberContainers() {}

    void change(int index, int number) {
        // If the index already has a number, remove it from the old number's index set
        if (indexToNumber.count(index)) {
            int oldNumber = indexToNumber[index];
            numberToIndices[oldNumber].erase(index);

            // Clean up the map if no indices remain
            if (numberToIndices[oldNumber].empty()) {
                numberToIndices.erase(oldNumber);
            }
        }

        // Update the index with the new number
        indexToNumber[index] = number;
        numberToIndices[number].insert(index);
    }

    int find(int number) {
        // If the number exists, return the smallest index
        if (numberToIndices.count(number) && !numberToIndices[number].empty()) {
            return *numberToIndices[number].begin();
        }
        return -1; // Number not found
    }
};

/**
 * Example usage:
 * NumberContainers* obj = new NumberContainers();
 * obj->change(1, 10);
 * obj->change(2, 10);
 * obj->change(3, 20);
 * int param_2 = obj->find(10);  // Should return 1 (smallest index for 10)
 */
